import os
import pandas as pd

from src.data_loader import load_raw_records
from src.preprocessing import preprocess_records
from src.modeling import train_bertopic, save_topic_assignments
from src.visualization import visualize_barchart, visualize_hierarchy, visualize_topics
from bertopic import BERTopic

CSV_DIR = "CSV"
RAW_DIR = "data"
OUTPUT_DIR = "outputs"
MODEL_PATH = "bertopic_model"

os.makedirs(CSV_DIR, exist_ok=True)

def run_preprocessing():
    records = load_raw_records(RAW_DIR)
    df = preprocess_records(records)
    df.to_csv(os.path.join(CSV_DIR, "Preprocessing.csv"), index=False, encoding="utf-8")
    print(f"‚úÖ –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {CSV_DIR}")

def run_training():
    df = pd.read_csv(os.path.join(CSV_DIR, "Preprocessing.csv"))
    docs_model = df["lemmas_filtered"].apply(eval).apply(lambda lst: " ".join(lst)).tolist()
    model, topics, probs = train_bertopic(docs_model)
    model.generate_topic_labels()
    model.save("bertopic_model")
    print("‚úÖ –û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ, –º–æ–¥–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.")

def run_model():
    if not os.path.exists(os.path.join(CSV_DIR, "Preprocessing.csv")) or not os.path.exists(MODEL_PATH):
        print("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –º–æ–¥–µ–ª—å –∏–ª–∏ –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç.")
        return
    df = pd.read_csv(os.path.join(CSV_DIR, "Preprocessing.csv"))
    docs = df["lemmas_filtered"].apply(eval).apply(lambda lst: " ".join(lst)).tolist()
    docs_label = df["cleaned_text"].tolist()
    model = BERTopic.load(MODEL_PATH)
    model.generate_topic_labels()
    topics, probs = model.transform(docs)
    save_topic_assignments(
        topics,
        probs,
        docs_label,
        result_path=os.path.join(CSV_DIR, "Result.csv"),
        stats_path=os.path.join(CSV_DIR, "Statistics.csv")
    )
    visualize_barchart(model, top_n=10, output_dir=OUTPUT_DIR)
    visualize_hierarchy(model, output_dir=OUTPUT_DIR)
    visualize_topics(model, output_dir=OUTPUT_DIR)
    print("‚úÖ –ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ø–∞–ø–∫–µ outputs.")

def main():
    while True:
        print("\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
        print("1. –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞")
        print("2. –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏")
        print("3. –ó–∞–ø—É—Å–∫ –º–æ–¥–µ–ª–∏")
        print("4. –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É")

        choice = input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–µ–π—Å—Ç–≤–∏—è: ").strip()

        match choice:
            case "1":
                run_preprocessing()
            case "2":
                run_training()
            case "3":
                run_model()
            case "4":
                print("üëã –†–∞–±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
                break
            case _:
                print("‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")

if __name__ == "__main__":
    main()
